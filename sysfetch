#!/bin/bash

primary_disk(){
  local line blockPath blockDevice

  while read line; do
    [[ $line =~ '0 1'$ ]]&&{ blockPath="${line%% *}"; break; }
  done </etc/fstab
  blockDevice="${blockPath#/dev/}"
  
  #read -r diskModel </sys/class/block/${blockDevice%[0-9]}/device/model

  read _ _ _ _ blockSize _ blocksTotal _ blocksAvailable _ _ < <(stat --file-system --terse /)
  ((partAvail=blockSize*blocksAvailable/1073741824))
  ((partTotal=blockSize*blocksTotal/1073741824))

  while read line; do
    [[ $line =~ sda$ ]]&&{ line="${line% *}" rawDiskTotal="${line##* }"; break; }
  done </proc/partitions
  ((diskTotal=rawDiskTotal/1048576))
}

check_memory(){
  local line rawMemory

  while read line; do
    case $line in
      MemTot*) rawMemory=("${line#*: }");;
      Active:*) rawMemory+=("${line#*:}"); break;;
    esac
  done </proc/meminfo

  ((memActive=${rawMemory[1]% kB}/1024))
  ((memTotal=${rawMemory[0]% kB}/1024))
  
  memUsage="$(awk 'BEGIN{printf "%.0f\n", (1683/7864)*100}')"
}

load_average(){ read -r line _ </proc/loadavg; loadAverage="${line#?.}"; }

kernel_release(){ read -r kernelName _ kernelRelease _ </proc/version; }

distribution(){
  local line

  while read line; do
    [[ $line =~ ^'PRETTY'|^'NAME' ]]&&{ 
      line="${line#*=}" distribution="${line//\"}"; break
    }
  done </etc/os-release
}

graphic_environment(){
  local line

  graphicEnvironment="${XDG_CURRENT_DESKTOP:-$DESKTOP_SESSION}"
  [[ ! $graphicEnvironment ]]&& hash wmctrl&&{
    while read line; do
      [[ $line =~ Name: ]]&&{ graphicEnvironment="${line#*: }"; break; }
    done < <(wmctrl)
  }
}

installed_packages(){
  unset packageCount
  : '/var/lib/pacman/local'; [[ -d $_ ]]&& for x in "$_"/*; do ((++packageCount)); done
}

check_swap(){
  local line curSwap maxSwap

  while read -a line; do
    (( ${i:=0} ))&&{
      ((curSwap+=${line[3]}/1024))
      ((maxSwap+=${line[2]}/1024))
    }|| ((++i))
  done </proc/swaps
}

stty -echo


if (( ${1:-0} > 0 )); then
  printf '\e[?1049h'
  for((;;)){
    trap 'printf "\e[?1049l"; stty echo; exit' 2
    main; sleep "$1"
  }
else
  main
fi

stty echo